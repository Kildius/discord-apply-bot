# apply_bot.py
# Lone Samurai ‚Äî –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É: –ø—Ä–∏–≤–µ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –≤—ã–±–æ—Ä —Ä–æ–ª–∏ ‚Üí –∞–Ω–∫–µ—Ç–∞ ‚Üí —Ç–∏–∫–µ—Ç ‚Üí –º–æ–¥–µ—Ä–∞—Ü–∏—è

import os
import asyncio
import logging
from typing import List, Optional

import discord
from discord import app_commands
from discord.ext import commands

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò / –ö–û–ù–°–¢–ê–ù–¢–´
# -----------------------------

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("ls-apply")

TOKEN = os.getenv("DISCORD_TOKEN")
WELCOME_CHANNEL_ID = int(os.getenv("WELCOME_CHANNEL_ID", "0"))  # –∫–∞–Ω–∞–ª #–∞–Ω–∫–µ—Ç–∞
TICKETS_CATEGORY_ID = int(os.getenv("TICKETS_CATEGORY_ID", "0"))  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–í—Å—Ç—É–ø–∞–π-–í-–ö–æ–º–∞–Ω–¥—É"

# –†–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç–∞–º –∏ –∫–Ω–æ–ø–∫–∞–º ¬´–û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
MOD_ROLE_IDS: List[int] = []
_raw_mods = os.getenv("MOD_ROLE_IDS", "").strip()
if _raw_mods:
    for x in _raw_mods.split(","):
        x = x.strip()
        if x.isdigit():
            MOD_ROLE_IDS.append(int(x))

# –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–≤–∞—à–∏ –≥–æ—Ç–æ–≤—ã–µ ID)
ROLES = {
    "–ö–ª–∏–Ω–µ—Ä": 1225460519712985140,
    "–¢–∞–π–ø–µ—Ä": 1225462096318169198,
    "–†–µ–¥–∞–∫—Ç–æ—Ä": 1225462307694448781,
    "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫-EN": 1225460206083903549,
    "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫-KR": 1409098606157365279,
}

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–µ—Ç–∫–∞ –≤ –ø—Ä–∏–≤–µ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
WELCOME_TAG = "LS_APPLY_WELCOME"

# -----------------------------
# –ë–û–¢
# -----------------------------

intents = discord.Intents.default()
intents.members = True  # –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π/–ø—Ä–∞–≤
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree


# -----------------------------
# –£–¢–ò–õ–ò–¢–´
# -----------------------------

def is_mod(user: discord.Member) -> bool:
    return any(r.id in MOD_ROLE_IDS for r in user.roles)


async def get_welcome_channel(guild: discord.Guild) -> Optional[discord.TextChannel]:
    return guild.get_channel(WELCOME_CHANNEL_ID) or await bot.fetch_channel(WELCOME_CHANNEL_ID)


async def get_tickets_category(guild: discord.Guild) -> Optional[discord.CategoryChannel]:
    cat = discord.utils.get(guild.categories, id=TICKETS_CATEGORY_ID)
    if not cat:
        try:
            cat = await bot.fetch_channel(TICKETS_CATEGORY_ID)  # —Ç–∏–ø –±—É–¥–µ—Ç CategoryChannel
        except Exception:
            cat = None
    return cat  # type: ignore


async def ensure_welcome_message(guild: discord.Guild):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç) –ø—Ä–∏–≤–µ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ #–∞–Ω–∫–µ—Ç–∞.
    """
    ch = await get_welcome_channel(guild)
    if not isinstance(ch, discord.TextChannel):
        log.warning("WELCOME_CHANNEL_ID —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.")
        return

    # –ò—â–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –º–µ—Ç–∫–µ WELCOME_TAG
    async for m in ch.history(limit=50):
        if m.author == bot.user and WELCOME_TAG in "".join([m.content] + [e.description if isinstance(e, discord.Embed) else "" for e in m.embeds]):
            # –û–±–Ω–æ–≤–∏–º view, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                await m.edit(view=WelcomeView())
            except Exception:
                pass
            return

    # –ù–µ –Ω–∞—à–ª–∏ ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ
    embed = discord.Embed(
        title=WELCOME_TAG,
        description=(
            "üëã **–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!** –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã **Lone Samurai**?\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. "
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –≤–∞—Å **—Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª** —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏."
        ),
        color=discord.Color.gold(),
    )
    await ch.send(embed=embed, view=WelcomeView())


async def create_ticket_channel(guild: discord.Guild, member: discord.Member) -> discord.TextChannel:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.
    –ü—Ä–∞–≤–∞: –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç, –º–æ–¥-—Ä–æ–ª–∏ –∏ –±–æ—Ç.
    """
    category = await get_tickets_category(guild)
    if not isinstance(category, discord.CategoryChannel):
        raise RuntimeError("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TICKETS_CATEGORY_ID.")

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(view_channel=False),
        member: discord.PermissionOverwrite(view_channel=True, send_messages=True, read_message_history=True),
        guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True, manage_channels=True),
    }
    for rid in MOD_ROLE_IDS:
        role = guild.get_role(rid)
        if role:
            overwrites[role] = discord.PermissionOverwrite(view_channel=True, send_messages=True, read_message_history=True)

    name = f"–∑–∞—è–≤–∫–∞-{member.name}".lower().replace(" ", "-")
    channel = await guild.create_text_channel(
        name=name[:90],
        category=category,
        overwrites=overwrites,
        reason=f"–¢–∏–∫–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è {member} ({member.id})",
    )
    return channel


# -----------------------------
# UI: –í–´–ë–û–† –†–û–õ–ò ‚Üí –ú–û–î–ê–õ–ö–ê
# -----------------------------

class RoleSelect(discord.ui.Select):
    def __init__(self):
        options = [discord.SelectOption(label=label) for label in ROLES.keys()]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        role_name = self.values[0]
        await interaction.response.send_modal(ApplicationModal(role_name))


class RoleSelectView(discord.ui.View):
    def __init__(self, *, timeout: float | None = 180):
        super().__init__(timeout=timeout)
        self.add_item(RoleSelect())


class ApplicationModal(discord.ui.Modal, title="–ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"):
    def __init__(self, role_name: str):
        super().__init__()
        self.role_name = role_name

        self.nick = discord.ui.TextInput(label="–ù–∏–∫ (–≤ –∏–≥—Ä–µ/—Ä–∞–±–æ—Ç–µ)*", required=True, max_length=64)
        self.age = discord.ui.TextInput(label="–í–æ–∑—Ä–∞—Å—Ç*", required=True, max_length=3, placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 21")
        self.location = discord.ui.TextInput(label="–ì–æ—Ä–æ–¥ / —Å—Ç—Ä–∞–Ω–∞*", required=True, max_length=64)
        self.tz = discord.ui.TextInput(label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–°–ö*", required=True, placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: +3")
        self.about = discord.ui.TextInput(label="–û —Å–µ–±–µ / –æ–ø—ã—Ç", required=False, style=discord.TextStyle.paragraph, max_length=500)

        # –í –º–æ–¥–∞–ª–∫–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º 5 –∏–Ω–ø—É—Ç–æ–≤
        self.add_item(self.nick)
        self.add_item(self.age)
        self.add_item(self.location)
        self.add_item(self.tz)
        self.add_item(self.about)

    async def on_submit(self, interaction: discord.Interaction):
        if not interaction.guild or not isinstance(interaction.user, discord.Member):
            return await interaction.response.send_message("–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

        member: discord.Member = interaction.user

        # –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª
        try:
            ticket = await create_ticket_channel(interaction.guild, member)
        except Exception as e:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª")
            return await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {e}", ephemeral=True)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ
        role_id = ROLES.get(self.role_name)
        role_mention = f"<@&{role_id}>" if role_id else self.role_name

        embed = discord.Embed(title="üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", color=discord.Color.blurple())
        embed.add_field(name="–ö–∞–Ω–¥–∏–¥–∞—Ç", value=f"{member.mention} (`{member.id}`)", inline=False)
        embed.add_field(name="–†–æ–ª—å", value=role_mention, inline=True)
        embed.add_field(name="–ù–∏–∫", value=str(self.nick), inline=True)
        embed.add_field(name="–í–æ–∑—Ä–∞—Å—Ç", value=str(self.age), inline=True)
        embed.add_field(name="–ì–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞", value=str(self.location), inline=True)
        embed.add_field(name="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–∫ –ú–°–ö)", value=str(self.tz), inline=True)
        if str(self.about).strip():
            embed.add_field(name="–û —Å–µ–±–µ / –æ–ø—ã—Ç", value=str(self.about), inline=False)

        await ticket.send(
            content="–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            embed=embed,
            view=ModeratorDecisionView(applicant_id=member.id, role_id=role_id)
        )

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await interaction.response.send_message(
            "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", ephemeral=True
        )


class WelcomeView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", style=discord.ButtonStyle.primary, custom_id="ls_apply_start")
    async def start(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–¥–∞—ë—Ç–µ:", view=RoleSelectView(), ephemeral=True
        )


# -----------------------------
# UI: –ú–û–î–ï–†–ê–¶–ò–Ø –¢–ò–ö–ï–¢–ê
# -----------------------------

class CloseByApplicantView(discord.ui.View):
    def __init__(self, *, applicant_id: int):
        super().__init__(timeout=600)
        self.applicant_id = applicant_id

    @discord.ui.button(label="–ê—Ä–∏–≥–∞—Ç–æ", style=discord.ButtonStyle.secondary, emoji="ü´∂")
    async def thanks(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not isinstance(interaction.user, discord.Member):
            return
        if interaction.user.id != self.applicant_id:
            return await interaction.response.send_message("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)
        await interaction.response.send_message("–ó–∞–∫—Ä—ã–≤–∞—é —Ç–∏–∫–µ—Ç‚Ä¶", ephemeral=True)
        await asyncio.sleep(1)
        try:
            await interaction.channel.delete(reason="–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ê—Ä–∏–≥–∞—Ç–æ)")
        except Exception:
            pass


class ModeratorDecisionView(discord.ui.View):
    def __init__(self, *, applicant_id: int, role_id: Optional[int]):
        super().__init__(timeout=None)
        self.applicant_id = applicant_id
        self.role_id = role_id

    async def _get_applicant(self, guild: discord.Guild) -> Optional[discord.Member]:
        try:
            return await guild.fetch_member(self.applicant_id)
        except Exception:
            return guild.get_member(self.applicant_id)

    async def _mod_check(self, interaction: discord.Interaction) -> bool:
        if not isinstance(interaction.user, discord.Member):
            return False
        if is_mod(interaction.user):
            return True
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", ephemeral=True)
        return False

    @discord.ui.button(label="–û–¥–æ–±—Ä–∏—Ç—å", style=discord.ButtonStyle.success, emoji="‚úÖ", custom_id="ls_decide_approve")
    async def approve(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not await self._mod_check(interaction):
            return
        guild = interaction.guild
        if not guild:
            return
        applicant = await self._get_applicant(guild)
        if not applicant:
            return await interaction.response.send_message("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

        # –í—ã–¥–∞—ë–º —Ä–æ–ª—å (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
        if self.role_id:
            role = guild.get_role(self.role_id)
            if role:
                try:
                    await applicant.add_roles(role, reason="–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
                except Exception as e:
                    log.warning(f"–ù–µ –≤—ã–¥–∞–ª–∞—Å—å —Ä–æ–ª—å: {e}")

        await interaction.response.send_message(
            content=f"üéâ {applicant.mention}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–Ω—è—Ç—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É.",
            view=CloseByApplicantView(applicant_id=applicant.id)
        )

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå", custom_id="ls_decide_deny")
    async def deny(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not await self._mod_check(interaction):
            return
        guild = interaction.guild
        if not guild:
            return
        applicant = await self._get_applicant(guild)
        if not applicant:
            return await interaction.response.send_message("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

        await interaction.response.send_message(
            content=f"{applicant.mention}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å. "
                    f"–ù–æ –ø–æ–∫–∞ **–∏–¥—Ç–∏ –ø—É—Ç—ë–º —Å–∞–º—É—Ä–∞—è —Ä–∞–Ω–æ–≤–∞—Ç–æ**. –¢–∏–∫–µ—Ç –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.",
            view=CloseByApplicantView(applicant_id=applicant.id)
        )

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.secondary, emoji="üîí", custom_id="ls_decide_close")
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not await self._mod_check(interaction):
            return
        await interaction.response.send_message("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è‚Ä¶", ephemeral=True)
        await asyncio.sleep(1)
        try:
            await interaction.channel.delete(reason="–ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        except Exception:
            pass


# -----------------------------
# –°–õ–≠–®-–ö–û–ú–ê–ù–î–´ –°–ï–†–í–ò–°–ù–´–ï
# -----------------------------

@tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞")
async def ping_cmd(interaction: discord.Interaction):
    await interaction.response.send_message("Pong!", ephemeral=True)


@tree.command(name="resync", description="–ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–æ–≤)")
async def resync_cmd(interaction: discord.Interaction):
    if not isinstance(interaction.user, discord.Member) or not is_mod(interaction.user):
        return await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", ephemeral=True)
    await tree.sync(guild=interaction.guild)
    await interaction.response.send_message("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.", ephemeral=True)


@tree.command(name="setup_welcome", description="–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ #–∞–Ω–∫–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–æ–≤)")
async def setup_welcome_cmd(interaction: discord.Interaction):
    if not isinstance(interaction.user, discord.Member) or not is_mod(interaction.user):
        return await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", ephemeral=True)
    if not interaction.guild:
        return await interaction.response.send_message("–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
    await ensure_welcome_message(interaction.guild)
    await interaction.response.send_message("–ì–æ—Ç–æ–≤–æ.", ephemeral=True)


# -----------------------------
# –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ
# -----------------------------

@bot.event
async def on_ready():
    log.info("Logged in as %s (%s)", bot.user, bot.user.id if bot.user else "‚Äî")
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏–π, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç
    for guild in bot.guilds:
        try:
            await tree.sync(guild=guild)
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å sync –¥–ª—è {guild.name}: {e}")
        try:
            await ensure_welcome_message(guild)
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç –≤ {guild.name}: {e}")


# -----------------------------
# –ó–ê–ü–£–°–ö
# -----------------------------

def _check_env():
    miss = []
    if not TOKEN:
        miss.append("DISCORD_TOKEN")
    if not WELCOME_CHANNEL_ID:
        miss.append("WELCOME_CHANNEL_ID")
    if not TICKETS_CATEGORY_ID:
        miss.append("TICKETS_CATEGORY_ID")
    if not MOD_ROLE_IDS:
        miss.append("MOD_ROLE_IDS")
    if miss:
        raise SystemExit(f"[FATAL] Missing environment variable(s): {', '.join(miss)}")

if __name__ == "__main__":
    _check_env()
    bot.run(TOKEN)
